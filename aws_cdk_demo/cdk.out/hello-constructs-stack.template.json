{
 "Resources": {
  "HelloHandlerServiceRole11EF7C63": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/HelloHandler/ServiceRole/Resource"
   }
  },
  "HelloHandler2E4FBA4D": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "1f6136a6e8693061e0b0f3ab12097ce5341aa778ccabc6198837f88e4bba1c60.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "HelloHandlerServiceRole11EF7C63",
      "Arn"
     ]
    },
    "Handler": "hello.handler",
    "Runtime": "python3.9"
   },
   "DependsOn": [
    "HelloHandlerServiceRole11EF7C63"
   ],
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/HelloHandler/Resource",
    "aws:asset:path": "asset.1f6136a6e8693061e0b0f3ab12097ce5341aa778ccabc6198837f88e4bba1c60",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "LambdaToDynamoDBLambdaFunctionServiceRole65A176C7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":log-group:/aws/lambda/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaFunctionServiceRolePolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/LambdaToDynamoDB/LambdaFunctionServiceRole/Resource"
   }
  },
  "LambdaToDynamoDBLambdaFunctionServiceRoleDefaultPolicy15C1CCE7": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTelemetryRecords",
        "xray:PutTraceSegments"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "LambdaToDynamoDBDynamoTable53C1442D",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "HelloHandler2E4FBA4D",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "HelloHandler2E4FBA4D",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaToDynamoDBLambdaFunctionServiceRoleDefaultPolicy15C1CCE7",
    "Roles": [
     {
      "Ref": "LambdaToDynamoDBLambdaFunctionServiceRole65A176C7"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/LambdaToDynamoDB/LambdaFunctionServiceRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC."
      }
     ]
    }
   }
  },
  "LambdaToDynamoDBLambdaFunctionBEB61136": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "1f6136a6e8693061e0b0f3ab12097ce5341aa778ccabc6198837f88e4bba1c60.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LambdaToDynamoDBLambdaFunctionServiceRole65A176C7",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "DOWNSTREAM_FUNCTION_NAME": {
       "Ref": "HelloHandler2E4FBA4D"
      },
      "DDB_TABLE_NAME": {
       "Ref": "LambdaToDynamoDBDynamoTable53C1442D"
      }
     }
    },
    "Handler": "hitcounter.handler",
    "Runtime": "python3.9",
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "LambdaToDynamoDBLambdaFunctionServiceRoleDefaultPolicy15C1CCE7",
    "LambdaToDynamoDBLambdaFunctionServiceRole65A176C7"
   ],
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/LambdaToDynamoDB/LambdaFunction/Resource",
    "aws:asset:path": "asset.1f6136a6e8693061e0b0f3ab12097ce5341aa778ccabc6198837f88e4bba1c60",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions."
      },
      {
       "id": "W89",
       "reason": "This is not a rule for the general case, just for specific use cases/industries"
      },
      {
       "id": "W92",
       "reason": "Impossible for us to define the correct concurrency for clients"
      }
     ]
    }
   }
  },
  "LambdaToDynamoDBDynamoTable53C1442D": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "KeySchema": [
     {
      "AttributeName": "path",
      "KeyType": "HASH"
     }
    ],
    "AttributeDefinitions": [
     {
      "AttributeName": "path",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    },
    "TableName": "SolutionsConstructsHits"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/LambdaToDynamoDB/DynamoTable/Resource"
   }
  },
  "ApiGatewayToLambdaApiAccessLogGroupE2B41502": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/ApiAccessLogGroup/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W86",
       "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely"
      },
      {
       "id": "W84",
       "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
      }
     ]
    }
   }
  },
  "ApiGatewayToLambdaLambdaRestApiF114AB02": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "EndpointConfiguration": {
     "Types": [
      "EDGE"
     ]
    },
    "Name": "LambdaRestApi"
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/Resource"
   }
  },
  "ApiGatewayToLambdaLambdaRestApiDeployment2DD5F1303a1d460ef21bca0c8a939e369724d997": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
    },
    "Description": "Automatically created by the RestApi construct"
   },
   "DependsOn": [
    "ApiGatewayToLambdaLambdaRestApiproxyANY6F82FBD9",
    "ApiGatewayToLambdaLambdaRestApiproxyA23CCA24",
    "ApiGatewayToLambdaLambdaRestApiANYBCB30DDA"
   ],
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/Deployment/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W45",
       "reason": "ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checkes for it in AWS::ApiGateway::Deployment resource"
      }
     ]
    }
   }
  },
  "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
    },
    "AccessLogSetting": {
     "DestinationArn": {
      "Fn::GetAtt": [
       "ApiGatewayToLambdaApiAccessLogGroupE2B41502",
       "Arn"
      ]
     },
     "Format": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"user\":\"$context.identity.user\",\"caller\":\"$context.identity.caller\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
    },
    "DeploymentId": {
     "Ref": "ApiGatewayToLambdaLambdaRestApiDeployment2DD5F1303a1d460ef21bca0c8a939e369724d997"
    },
    "MethodSettings": [
     {
      "DataTraceEnabled": false,
      "HttpMethod": "*",
      "LoggingLevel": "INFO",
      "ResourcePath": "/*"
     }
    ],
    "StageName": "prod",
    "TracingEnabled": true
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/DeploymentStage.prod/Resource"
   }
  },
  "ApiGatewayToLambdaLambdaRestApiproxyA23CCA24": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaLambdaRestApiF114AB02",
      "RootResourceId"
     ]
    },
    "PathPart": "{proxy+}",
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
    }
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/Default/{proxy+}/Resource"
   }
  },
  "ApiGatewayToLambdaLambdaRestApiproxyANYApiPermissionhelloconstructsstackApiGatewayToLambdaLambdaRestApiE22853AFANYproxy077BEAE0": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaToDynamoDBLambdaFunctionBEB61136",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
       },
       "/",
       {
        "Ref": "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6"
       },
       "/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/Default/{proxy+}/ANY/ApiPermission.helloconstructsstackApiGatewayToLambdaLambdaRestApiE22853AF.ANY..{proxy+}"
   }
  },
  "ApiGatewayToLambdaLambdaRestApiproxyANYApiPermissionTesthelloconstructsstackApiGatewayToLambdaLambdaRestApiE22853AFANYproxy97DAB2A5": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaToDynamoDBLambdaFunctionBEB61136",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
       },
       "/test-invoke-stage/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/Default/{proxy+}/ANY/ApiPermission.Test.helloconstructsstackApiGatewayToLambdaLambdaRestApiE22853AF.ANY..{proxy+}"
   }
  },
  "ApiGatewayToLambdaLambdaRestApiproxyANY6F82FBD9": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "ANY",
    "ResourceId": {
     "Ref": "ApiGatewayToLambdaLambdaRestApiproxyA23CCA24"
    },
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "LambdaToDynamoDBLambdaFunctionBEB61136",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/Default/{proxy+}/ANY/Resource"
   }
  },
  "ApiGatewayToLambdaLambdaRestApiANYApiPermissionhelloconstructsstackApiGatewayToLambdaLambdaRestApiE22853AFANYA5D0CD48": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaToDynamoDBLambdaFunctionBEB61136",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
       },
       "/",
       {
        "Ref": "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6"
       },
       "/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/Default/ANY/ApiPermission.helloconstructsstackApiGatewayToLambdaLambdaRestApiE22853AF.ANY.."
   }
  },
  "ApiGatewayToLambdaLambdaRestApiANYApiPermissionTesthelloconstructsstackApiGatewayToLambdaLambdaRestApiE22853AFANY20744276": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaToDynamoDBLambdaFunctionBEB61136",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
       },
       "/test-invoke-stage/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/Default/ANY/ApiPermission.Test.helloconstructsstackApiGatewayToLambdaLambdaRestApiE22853AF.ANY.."
   }
  },
  "ApiGatewayToLambdaLambdaRestApiANYBCB30DDA": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "ANY",
    "ResourceId": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaLambdaRestApiF114AB02",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "LambdaToDynamoDBLambdaFunctionBEB61136",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/Default/ANY/Resource"
   }
  },
  "ApiGatewayToLambdaLambdaRestApiUsagePlanCD03FACA": {
   "Type": "AWS::ApiGateway::UsagePlan",
   "Properties": {
    "ApiStages": [
     {
      "ApiId": {
       "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
      },
      "Stage": {
       "Ref": "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6"
      },
      "Throttle": {}
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApi/UsagePlan/Resource"
   }
  },
  "ApiGatewayToLambdaLambdaRestApiCloudWatchRole43F16710": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:FilterLogEvents",
          "logs:GetLogEvents",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaRestApiCloudWatchRolePolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApiCloudWatchRole/Resource"
   }
  },
  "ApiGatewayToLambdaLambdaRestApiAccountF45E70A9": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "ApiGatewayToLambdaLambdaRestApiCloudWatchRole43F16710",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayToLambdaLambdaRestApiF114AB02"
   ],
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/ApiGatewayToLambda/LambdaRestApiAccount"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VRTW/CMAz9LdzTMIY0jdv40LhsWsXYGYU06zLSuKodsarqf5+TFgSX+vnFtZ+fH2X3PJMPE3XGTBenzNmj7D5J6ZNg6tA5VR0LJbvX4DVZ8GL97W9xbprKInLWC6sq2e3AmfiQYg7O6jbVJdQLnB8UoiGUyxg4l6ugT4ZWCo0oWq8qKFjCXh2HPgn0wkGJsnuDcttAqOPDBfdC1bZUZM6q5Yqkd2eQlrVNOka4MbWDtjKeInuT8bJlmjQArofQaJP05A38tRdm7Dbgd0M/UERqRF/If+dOJVfukqXWEDz1/bW3SLvHedaXseQjUB3obgDjNfjCUrJ2vuAbvcQjIbgQOT4Xf6gJmnAaH8ZTZVcPByv2sEnEZnXjUzaelY3ZDswehnJWmbe8kJ/O5ULOnia/aG3WsH5bGbkb4j+/DHzpNQIAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "hello-constructs-stack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "ApiGatewayToLambdaLambdaRestApiEndpoint9800D4B5": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "ApiGatewayToLambdaLambdaRestApiF114AB02"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "ApiGatewayToLambdaLambdaRestApiDeploymentStageprod5DAE88D6"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}